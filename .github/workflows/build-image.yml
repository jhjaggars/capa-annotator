name: Build and Push Multi-Arch Image

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag to use (defaults to branch name or tag)'
        required: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Multi-Arch Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64,amd64

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Extract metadata (tags, labels)
      id: meta
      run: |
        # Determine the image tag
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
          TAG="${{ github.event.inputs.tag }}"
        elif [ "${{ github.ref_type }}" = "tag" ]; then
          TAG="${GITHUB_REF#refs/tags/}"
        else
          TAG="${GITHUB_REF#refs/heads/}"
          TAG="${TAG//\//-}"
        fi

        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "image=${REGISTRY}/${IMAGE_NAME,,}" >> $GITHUB_OUTPUT

    - name: Build multi-arch image
      run: |
        podman build \
          --platform linux/amd64,linux/arm64 \
          --manifest ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }} \
          .

    - name: Push multi-arch manifest
      run: |
        podman manifest push --all \
          ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }} \
          docker://${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}

    - name: Tag as latest (for version tags only)
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        podman tag ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }} \
          ${{ steps.meta.outputs.image }}:latest
        podman manifest push --all \
          ${{ steps.meta.outputs.image }}:latest \
          docker://${{ steps.meta.outputs.image }}:latest
